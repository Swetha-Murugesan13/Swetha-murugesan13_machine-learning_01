import numpy as np

class KMeans:
    def __init__(self, k=3, max_iters=100):
        self.k = k
        self.max_iters = max_iters

    def fit(self, X):
        self.centroids = X[np.random.choice(X.shape[0], self.k, replace=False)]
        for _ in range(self.max_iters):
            # Assign each data point to the closest centroid
            clusters = [[] for _ in range(self.k)]
            for x in X:
                distances = [np.linalg.norm(x - c) for c in self.centroids]
                cluster_index = np.argmin(distances)
                clusters[cluster_index].append(x)

            # Update centroids to the mean of their respective clusters
            for i in range(self.k):
                if clusters[i]:
                    self.centroids[i] = np.mean(clusters[i], axis=0)

    def predict(self, X):
        predictions = []
        for x in X:
            distances = [np.linalg.norm(x - c) for c in self.centroids]
            cluster_index = np.argmin(distances)
            predictions.append(cluster_index)
        return predictions

# Example usage:
# Assume X is the purchase history data of customers, where each row represents a customer's purchase behavior
# and each column represents a different product category.

# Initialize and fit KMeans model
kmeans = KMeans(k=3)
kmeans.fit(X)

# Predict clusters for new data
new_data = np.array([[2, 5, 3, 1], [1, 3, 2, 4]])  # Example new data
predictions = kmeans.predict(new_data)
print("Predicted clusters:", predictions)
