import tensorflow as tf
from tensorflow.keras import layers, models

# Define the CNN architecture
inputs = tf.keras.Input(shape=(224, 224, 3))
x = layers.Conv2D(32, (3, 3), activation='relu')(inputs)
x = layers.MaxPooling2D((2, 2))(x)
x = layers.Conv2D(64, (3, 3), activation='relu')(x)
x = layers.MaxPooling2D((2, 2))(x)
x = layers.Conv2D(128, (3, 3), activation='relu')(x)
x = layers.MaxPooling2D((2, 2))(x)
x = layers.Conv2D(128, (3, 3), activation='relu')(x)
x = layers.MaxPooling2D((2, 2))(x)
x = layers.Flatten()(x)
x = layers.Dropout(0.5)(x)
outputs1 = layers.Dense(num_classes, activation='softmax')(x)  # Classification output
outputs2 = layers.Dense(1, activation='linear')(x)  # Regression output

# Define the model
model = models.Model(inputs, [outputs1, outputs2])

# Compile the model
model.compile(optimizer='adam',
              loss=['sparse_categorical_crossentropy', 'mean_squared_error'],
              metrics=['accuracy'])

# Train the model
history = model.fit(train_images, [train_labels, train_calories],
                    validation_data=(validation_images, [validation_labels, validation_calories]),
                    epochs=10, batch_size=32)

# Evaluate the model
test_loss, test_accuracy, test_mse = model.evaluate(test_images, [test_labels, test_calories])
print('Test Accuracy:', test_accuracy)
print('Test MSE:', test_mse)
